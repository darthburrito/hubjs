{
  "name": "HubJS",
  "tagline": "Messaging for microservices/SOA",
  "body": "## Usage\r\n\r\n### Deployment\r\n\r\n```sh\r\ngit clone https://github.com/igorshapiro/hubjs.git hubjs\r\n```\r\n\r\n### Configuration\r\n\r\nCreate `services.json` file in the root of the cloned directory:\r\n\r\n```json\r\n{\r\n  \"services\": {\r\n    \"pub\": {\r\n      \"publishes\": [\"load_test\", \"pricing_changed\"],\r\n      \"concurrency\": 100\r\n    },\r\n    \"sub\": {\r\n      \"subscribes\": [\"load_test\", \"pricing_changed\"],\r\n      \"endpoint\": \"http://localhost:3100/:type\",\r\n      \"concurrency\": 100\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe file is an object with `service name`s as keys and `service configurations` as values. The following options are used in service configuration:\r\n\r\n- `concurrency` - How many concurrent messages can a service accept.\r\n- `publishes` - Types of messages that the service is publishing (message can't have more than one publisher)\r\n- `subscribes` - Types of messages that the service is subscribed to\r\n- `endpoint` - the HTTP endpoint that accepts the messages. Message is delivered via HTTP POST request. Endpoint can use wildcards:\r\n  - `:type` - message type\r\n  - `:env` - environment, TBD\r\n- `queue` - queue url (currently only `rabbitmq://` supported )\r\n- `intermediate` - intermediate storage url (used for concurrency coordination, processing storage, etc.). Currently only `redis://` supported.\r\n- `storage` - long-term storage url (recurring messages, dead letter, messages archive, etc.). Only `mongodb://` supported\r\n\r\n### Running\r\n\r\n```sh\r\nnpm start\r\n```\r\n\r\n## API\r\n\r\n### Publishing a message\r\n\r\n```sh\r\ncurl -X /api/v1/messages\r\n```\r\n\r\n# Development\r\n\r\nCan use node v4+\r\n\r\n```sh\r\nbrew install redis mongodb rabbitmq\r\nnpm install -g nodemon ember-cli\r\n```\r\n\r\n## Design\r\n\r\n### Middlewares\r\n\r\n- WebServer\r\n- API\r\n- OutQueue\r\n- InQueue\r\n- DeliverMessage (input -> service)\r\n- NewRelic\r\n- StatsD\r\n- Processing storage\r\n- LoadBalancer (concurrency manager)\r\n- Scheduler\r\n- ErrorHandler\r\n- DeadLetter storage\r\n- Archive storage (optional)\r\n- Inspector (inspects messages matching specific criteria and their handlers)\r\n- Bulk messages\r\n\r\n# Examples\r\n\r\n## Example API calls\r\n\r\nPublish a message\r\n```sh\r\ncurl -X POST \\\r\n  -H\"Content-Type: application/json\" \\\r\n  http://localhost:8080/api/v1/api/messages \\\r\n  -d '{\"type\": \"pricing_changed\", \"content\": {}}'\r\n```\r\n\r\nReplay messages\r\n\r\n```sh\r\ncurl -X POST \\\r\n  -H\"Content-Type: application/json\" \\\r\n  http://localhost:8080/api/v1/services/sub/archive \\\r\n  -d '{\"from\": 0}'\r\n```\r\n\r\nRegister recurring message\r\n```sh\r\ncurl -X POST \\\r\n  -H\"Content-Type: application/json\" \\\r\n  http://localhost:8080/api/v1/services/sub/recurring \\\r\n  -d '{\"type\": \"recurring\", \"deliverEveryMillis\": 1000}'\r\n```\r\n\r\nUnregister recurring message\r\n```sh\r\ncurl -X DELETE http://localhost:8080/api/v1/services/sub/recurring/recurring\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}